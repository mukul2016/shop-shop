{"ast":null,"code":"var _jsxFileName = \"/Users/msharma/BWork/unit22-shopshop/shop-shop/client/src/components/CategoryMenu/index.js\";\nimport { useQuery } from \"@apollo/react-hooks\";\nimport React, { useEffect } from 'react';\nimport { UPDATE_CATEGORIES, UPDATE_CURRENT_CATEGORY } from '../../utils/actions';\nimport { QUERY_CATEGORIES } from \"../../utils/queries\";\nimport { useStoreContext } from \"../../utils/GlobalState\";\n\nfunction CategoryMenu() {\n  // const categories = categoryData?.categories || [];\n  // const { data: categoryData } = useQuery(QUERY_CATEGORIES);\n  const [state, dispatch] = useStoreContext();\n  const {\n    categories\n  } = state;\n  const {\n    data: categoryData\n  } = useQuery(QUERY_CATEGORIES);\n  useEffect(() => {\n    // if categoryData exists or has changed from the response of useQuery, then run dispatch()\n    if (categoryData) {\n      // execute our dispatch function with our action object indicating the type of action and the data to set our state for categories to\n      dispatch({\n        type: UPDATE_CATEGORIES,\n        categories: categoryData.categories\n      });\n    }\n  }, [categoryData, dispatch]);\n\n  const handleClick = id => {\n    dispatch({\n      type: UPDATE_CURRENT_CATEGORY,\n      currentCategory: id\n    });\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 7\n    }\n  }, \"Choose a Category:\"), categories.map(item => /*#__PURE__*/React.createElement(\"button\", {\n    key: item._id,\n    onClick: () => {\n      handleClick(item._id);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 9\n    }\n  }, item.name)));\n}\n\nexport default CategoryMenu;","map":{"version":3,"sources":["/Users/msharma/BWork/unit22-shopshop/shop-shop/client/src/components/CategoryMenu/index.js"],"names":["useQuery","React","useEffect","UPDATE_CATEGORIES","UPDATE_CURRENT_CATEGORY","QUERY_CATEGORIES","useStoreContext","CategoryMenu","state","dispatch","categories","data","categoryData","type","handleClick","id","currentCategory","map","item","_id","name"],"mappings":";AAAA,SAASA,QAAT,QAAyB,qBAAzB;AACA,OAAOC,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,iBAAT,EAA4BC,uBAA5B,QAA2D,qBAA3D;AACA,SAASC,gBAAT,QAAiC,qBAAjC;AACA,SAASC,eAAT,QAAgC,yBAAhC;;AAEA,SAASC,YAAT,GAAwB;AACtB;AACA;AACA,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBH,eAAe,EAAzC;AAEA,QAAM;AAAEI,IAAAA;AAAF,MAAiBF,KAAvB;AAEA,QAAM;AAAEG,IAAAA,IAAI,EAAEC;AAAR,MAAyBZ,QAAQ,CAACK,gBAAD,CAAvC;AAEAH,EAAAA,SAAS,CAAC,MAAM;AACd;AACA,QAAIU,YAAJ,EAAkB;AAChB;AACAH,MAAAA,QAAQ,CAAC;AACPI,QAAAA,IAAI,EAAEV,iBADC;AAEPO,QAAAA,UAAU,EAAEE,YAAY,CAACF;AAFlB,OAAD,CAAR;AAID;AACF,GATQ,EASN,CAACE,YAAD,EAAeH,QAAf,CATM,CAAT;;AAWA,QAAMK,WAAW,GAAGC,EAAE,IAAI;AACxBN,IAAAA,QAAQ,CAAC;AACPI,MAAAA,IAAI,EAAET,uBADC;AAEPY,MAAAA,eAAe,EAAED;AAFV,KAAD,CAAR;AAID,GALD;;AAQA,sBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0BADF,EAEGL,UAAU,CAACO,GAAX,CAAeC,IAAI,iBAClB;AACE,IAAA,GAAG,EAAEA,IAAI,CAACC,GADZ;AAEE,IAAA,OAAO,EAAE,MAAM;AACbL,MAAAA,WAAW,CAACI,IAAI,CAACC,GAAN,CAAX;AACD,KAJH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAMGD,IAAI,CAACE,IANR,CADD,CAFH,CADF;AAgBD;;AAED,eAAeb,YAAf","sourcesContent":["import { useQuery } from \"@apollo/react-hooks\";\nimport React, { useEffect } from 'react';\nimport { UPDATE_CATEGORIES, UPDATE_CURRENT_CATEGORY } from '../../utils/actions';\nimport { QUERY_CATEGORIES } from \"../../utils/queries\";\nimport { useStoreContext } from \"../../utils/GlobalState\";\n\nfunction CategoryMenu() {\n  // const categories = categoryData?.categories || [];\n  // const { data: categoryData } = useQuery(QUERY_CATEGORIES);\n  const [state, dispatch] = useStoreContext();\n\n  const { categories } = state;\n\n  const { data: categoryData } = useQuery(QUERY_CATEGORIES);\n\n  useEffect(() => {\n    // if categoryData exists or has changed from the response of useQuery, then run dispatch()\n    if (categoryData) {\n      // execute our dispatch function with our action object indicating the type of action and the data to set our state for categories to\n      dispatch({\n        type: UPDATE_CATEGORIES,\n        categories: categoryData.categories\n      });\n    }\n  }, [categoryData, dispatch]);\n\n  const handleClick = id => {\n    dispatch({\n      type: UPDATE_CURRENT_CATEGORY,\n      currentCategory: id\n    });\n  };\n  \n  \n  return (\n    <div>\n      <h2>Choose a Category:</h2>\n      {categories.map(item => (\n        <button\n          key={item._id}\n          onClick={() => {\n            handleClick(item._id);\n          }}\n        >\n          {item.name}\n        </button>\n      ))}\n    </div>\n  );\n  \n}\n\nexport default CategoryMenu;\n"]},"metadata":{},"sourceType":"module"}